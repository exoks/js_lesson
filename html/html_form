#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä               ìêì  html_form ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou  oussama.ezzaou@gmail.com 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/05/09 00:05:07 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/05/09 12:11:18 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

===[ Form: <form> ...</form> ]==================================================
* <form> is a container used to 'collect user input' and 'send it to a server' 
  for processing (login page, signup page, etc). 

  # NOTE:
  # - Form inputs can be checked using javascript before send it to a server. 

  > [ Based Syntax: ]
    <form action="URL" method="get/post">
      // collection of user input
    </form>

> [ Form: Attributes ]
________________________________________________________________________________
| Attribute        | Description                                               |
|------------------|-----------------------------------------------------------|
| `action`         | - URL where the form data will be sent when submitted.    |
| `method`         | - HTTP method used to send data: `GET` (default) or `POST`|
| `target`         |   Where to display the response: `_self`,                 |
|                  | - `_blank`, `_parent`, or `_top`.                         |
| `name`           | - Optional name used to reference the form in scripts     |
| `autocomplete`   | - Enables/disables browser autocomplete:                  |
|                  |   `on` (default) or `off`.                                |
| `novalidate`     | - Disables built-in HTML form validation (except safari)  |
| `rel` (HTML5)    | - Describes the relationship between the form and another |
|                  |   document (rarely used)                                  |
| `accept-charset` | - Specifies character encodings the server accepts        |
|__________________|___(like `UTF-8`)__________________________________________|

  - Every From must have 'submit button' (<input type="submit" />)
  - Click on submit button means sending 'get' or 'post' request.
  - Every Input must have an 'attr name', this attr helps the browser to build
    the body of the request in json form.
    > ex:
      [
        name: value 
        ...
      ]

  > [ How It Works: ]
    - When the user fills in the form and hits 'Submit', the browser sends the
      data to the URL in the 'action' using HTTP method
      - If it is a `GET` request, the data is sent as part of the URL.
      - If it is `POST` request the data is sent in the request body. 

# INFO:========================================================================= 
# - GET request does not have a body, It is used to retrieve data, not to      |
#   submit large or sensitive input, That is why GET request send data using   |
#   the URL query string (after ?symbol)                                       |
# - Any parameters are added directly to the URL like this:                    |
#   GET /search?qapple&page=2 HTTP/1.1                                         |
#   Host: example.com                                                          |
# - POST request do include a body, which is where form data is placed:        |
#   POST /submit HTTP/1.1                                                      |
#   Host: example.com                                                          |
#   Content-Type: application/x-www-form-urlencoded                            |
#                                                                              |
#   username="john&password"&password=1234                                     |
# ==============================================================================

-> [ Tags used in the form: ]
- '<label>': used to name the element in the form
- '<button>': used to define button
- '<textarea>': 
- '<select>': used to get a menu
- '<datalist>':
- '<fieldset>':
- '<input>': The most important one, used to get different s  hapes.

-> [ <input>: shapes ]
    - type="text"     | textview for text (default)
    - type="password" | textview for password
    - type="number"   | text view for numbers
    - type="email"    | text view for email
    - type="button"   | normal button
    - type="sumbit"   | form submit button
    - type="reset"    | reset button
    - type="file"     | button to upload a file
    - type="range"    | range bar 
    - type="checkbox" | checkbox 
    - type="radio"    | radio (something like checkbox)
