#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä               ìêì  html_form ìêî           
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä       Dev: oezzaou  oussama.ezzaou@gmail.com 
#  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
#  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
#  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2025/05/09 00:05:07 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/05/10 15:56:00 by oezzaou
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
#  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

===[ Form: <form> ...</form> ]==================================================
* <form> is a container used to 'collect user input' and 'send it to a server' 
  for processing (login page, signup page, etc). 

  # NOTE:
  # - Form inputs can be checked using javascript before send it to a server. 

  > [ Based Syntax: ]
    <form action="URL" method="get/post">
      // collection of user input
    </form>

> [ Form: Attributes ]
________________________________________________________________________________
| Attribute        | Description                                               |
|------------------|-----------------------------------------------------------|
| `action`         | - URL where the form data will be sent when submitted.    |
| `method`         | - HTTP method used to send data: `GET` (default) or `POST`|
| `target`         |   Where to display the response: `_self`,                 |
|                  | - `_blank`, `_parent`, or `_top`.                         |
| `name`           | - Optional name used to reference the form in scripts     |
| `autocomplete`   | - Enables/disables browser autocomplete:                  |
|                  |   `on` (default) or `off`.                                |
| `novalidate`     | - Disables built-in HTML form validation (except safari)  |
| `rel` (HTML5)    | - Describes the relationship between the form and another |
|                  |   document (rarely used)                                  |
| `accept-charset` | - Specifies character encodings the server accepts        |
|__________________|___(like `UTF-8`)__________________________________________|

  - Every Form must have 'submit button' (<input type="submit" />)
  - Click on submit button means sending 'get' or 'post' request.
  - Every Input must have an 'attr name', this attr helps the browser to build
    the body of the HTTP request POST | URL in 'GET' request.
    > ex (POST):
      [
        name: value 
        ...
      ]

  > [ How It Works: ]
    - When the user fills in the form and hits 'Submit', the browser sends the
      data to [ the URL in the 'action' ] using HTTP method
      - If it is a `GET` request, the data is sent as part of the URL.
      - If it is `POST` request the data is sent in the request body. 

# INFO:========================================================================= 
# - GET request does not have a body, It is used to 'retrieve' data, not to    |
#   submit large or sensitive input, That is why GET request send data using   |
#   the URL query string (after ?symbol)                                       |
# - Any parameters are added directly to the URL like this:                    |
#     GET /search?qapple&page=2 HTTP/1.1                                       |
#     Host: example.com                                                        |
# - POST request does include a body, which is where from data is placed:      |
#   POST /submit HTTP/1.1                                                      |
#     Host: example.com                                                        |
#     Content-Type: application/x-www-form-urlencoded                          |
#                                                                              |
#     username="john&password"&password=1234                                   |
# ==============================================================================

-> [ Tags used in the form: ]
- '<label>': used to name the element in the form
- '<button>': used to define button
- '<textarea>': used to define a multi-line text input unlike the single input 
- '<select>': 
- '<datalist>':
- '<fieldset>':
- '<input>': The most important one, used to get different shapes.

> [ <input>: shapes ]
    > Type       | Purpose                    
    - `text`     | Single-line text input (text field)
    - `password` | Hides text for passwords
    - `email`    | Email format validation
    - `number`   | Numeric input
    - `checkbox` | Multiple-choice option
    - `radio`    | Single-choice from a group
    - `submit`   | Submit the form
    - `file`     | File upload
    - `button`   | Clickable button
    - `date`     | Date picker
    -------------|-------------------------------------
    - Total      | 10 Input Types

===[ Form: <label> ...</label> ]================================================
* <label> tag in HTML is used to 'associate a text description with a form'
'control', It is simply used to name an element.
  > example:
    <form>
      # It is not recommended to name element like this
      User Name<br><br>
      <input type="text" id="elem_name" />
      # Use <label> instead
      <label for="elem_name">User name</label><br>
      <input type="text" id="elem_name" />
    </form>

# NOTE:========================================================================
# - If you use the first method the browser won't know that username is       |
#   associted to <input>, When the user select username text, It won't be     |
#   selected, in the other hand with <label> tag the input will be selected.  |
# - <label> tag importance is shown when using cellphones instead of pc,      |
#   selecting the input in cellphone is hard, linking the elements reduce the |
#   range of selection.                                                       | 
# - <label> tag adds more styling features the input.                         | 
# =============================================================================

> [ Why Use <label> ?]
  |> Allows users to click on the label to focus the input
  |> Improves form usability and accessibility
  |> Associates text with a form element

===[ Form: Input types: ]=======================================================
  * We can Catigorize `<input>` into two main types based on their purpose:

                     |--------[ Input Types: ]--------| 
                     |                                |
              [ Input Fields ]                  [ Input Buttons ]
  * Allows user to enter or select   |   * It is used to 'trigger actions'. 
    the data.                        |     - sumbit 
    - text                           |     - reset
    - password                       |     - button 
    - number                         |     - file
    - email                          |
    - checkbox                       |
    - radio                          |
  -----------------------------------|--------------------------------------
    - text area (<textarea/>)        |     - Button <button>

===[ Form: Input Fields  (Single Tag) ]==========================================
* <input> tag is used to 'create interactive form controls' for user input -
  such as text field, checkboxes, radio buttons, file uploads, etc. 

  > [ Based Syntax: ]
    <input type="input_type" />

  > [ <input>: attributes ]
    ____________________________________________________________________
    | Attribute     | Description                                      |
    |---------------|--------------------------------------------------|
    | `id`          | - assign an id for an input element              |
    | `name`        | - Key used to send the input value to the server |
    | `value`       | - Default value of the input                     |
    | `type`        | - define the type input (text field, checkbox...)| 
    | `placeholder` | - Hint text inside the field                     |
    | `required`    | - Makes the field mandatory                      |
    | `readonly`    | - Makes the field uneditable                     |
    | `disabled`    | - Disables the input                             |
    | `size`        | - Size of the input                              |
    | `maxlength`   | - Limits character input                         |
    |_______________|__________________________________________________|

  # NOTE: Default type for the input is 'text'

> [ Form: <textarea> Multi-line text ]
  * <textarea> is used to create a multi-line text input field -- unlike
  <input type="text" /> which only allows a single line, It is usually used when
  to ask for address or summary.

  > [ Based Syntax: ]
    <textarea >Text field (default value)</textarea>

  > [ <textarea>: attrs ]
    _________________________________________________________________
    | Attribute     | Description                                   |
    |---------------|-----------------------------------------------|
    | `name`        | The key used to send the text to the server   |
    | `rows`        | Number of visible text lines (height)         |
    | `cols`        | Number of visible characters per line (width) |
    | `placeholder` | Hint text shown when empty (HTML5)            |
    | `maxlength`   | Maximum number of characters allowed          |
    | `required`    | Makes the field mandatory                     |
    | `readonly`    | Makes it uneditable                           |
    | `disabled`    | Disables the field                            |
    |_______________|_______________________________________________|

===[ Form: Input Buttons: ]==========================================
* <input> is used for input buttons beside input fields. 
  > Main types are:
    - button  | <input type="button" />
    - reset   | <input type="reset" /> resets the values of the form
    - submit  | <input type="submit" />
    - file    | <input type="file" /> 

  > [ Input Button: <button> ]
    - <input> tag is not the only tag used to create a button element.
      There is <button> which does the same. 

    > [ Based Syntax: ] 
      <button type="button">value</button>

  # QUESTION:[ <input type="button"> VS <button> ...</button> ]========== 
  # _____________________________________________________________________
  # |    <input type="button">    |               <button>              |
  # |-----------------------------|-------------------------------------|
  # |- Inline element             |- Inline element                     |
  # |- Single Tag                 |- Paired Tag                         |
  # |- Only supports `value` text |- Can contain HTML, icons, text, etc.|
  # |- Limited                    |- More flexible and customizable     |
  # |_____________________________|_____________________________________|
